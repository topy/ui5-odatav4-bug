/*!
 * OpenUI5
 * (c) Copyright 2009-2021 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
sap.ui.define(["sap/base/Log","sap/base/util/ObjectPath","sap/ui/core/mvc/View"],function(e,n,i){"use strict";sap.ui.extensionpoint=function(n,i,o,a,r){e.warning("Do not use deprecated factory function 'sap.ui.extensionpoint'. Use 'sap.ui.core.ExtensionPoint.load' instead","sap.ui.extensionpoint",null,function(){return{type:"sap.ui.extensionpoint",name:i}});return t._factory(n,i,o,a,r)};var t=sap.ui.extensionpoint;t._factory=function(o,a,r,s,f){var u,c,g;var l=sap.ui.require("sap/ui/core/CustomizingConfiguration");if(o){if(o.isA("sap.ui.core.mvc.View")){u=l&&l.getViewExtension(o.sViewName,a,o);c=o}else if(o.isA("sap.ui.core.Fragment")){u=l&&l.getViewExtension(o.getFragmentName(),a,o);c=o._oContainingView}}if(u){if(u.className){var d=sap.ui.requireSync(u.className.replace(/\./g,"/"));d=d||n.get(u.className);var m=c&&u.id?c.createId(u.id):u.id;e.info("Customizing: View extension found for extension point '"+a+"' in View '"+c.sViewName+"': "+u.className+": "+(u.viewName||u.fragmentName));if(u.className==="sap.ui.core.Fragment"){var p=new d({id:m,type:u.type,fragmentName:u.fragmentName,containingView:c});g=Array.isArray(p)?p:[p]}else if(u.className==="sap.ui.core.mvc.View"){c=i._legacyCreate({type:u.type,viewName:u.viewName,id:m});g=[c]}else{e.warning("Customizing: Unknown extension className configured (and ignored) in Component.js for extension point '"+a+"' in View '"+c.sViewName+"': "+u.className)}}else{e.warning("Customizing: no extension className configured in Component.js for extension point '"+a+"' in View '"+c.sViewName+"': "+u.className)}}else if(t._fnExtensionProvider){var v=t._fnExtensionProvider(c);var w;if(c.isA("sap.ui.core.Fragment")){w=c._sExplicitId;var x=c.getController();c=x&&typeof x.isA==="function"&&x.isA("sap.ui.core.mvc.Controller")&&x.getView();if(c){w=c.getLocalId(w)||w}}if(v){if(!c){e.warning("View instance could not be passed to ExtensionPoint Provider for extension point '"+a+"' "+"in fragment '"+w+"'.")}return[{providerClass:v,view:c,fragmentId:w,name:a,createDefault:r,targetControl:undefined,aggregationName:undefined,index:undefined,ready:function(e){var n=this._nextSibling;while(n!=null){n.index+=e.length;n=n._nextSibling}},_isExtensionPoint:true,_nextSibling:null}]}}if(!g&&typeof r==="function"){g=r()}var N=function(n){if(n&&!Array.isArray(n)){n=[n]}if(n&&s){var i=s.getMetadata().getAggregation(f);if(i){for(var t=0,o=n.length;t<o;t++){s[i._sMutator](n[t])}}else{e.error("Creating extension point failed - Tried to add extension point with name "+a+" to an aggregation of "+s.getId()+" in view "+c.sViewName+", but sAggregationName was not provided correctly and I could not find a default aggregation")}}return n||[]};if(g&&typeof g.then==="function"){return g.then(N)}else{return N(g)}};t.registerExtensionProvider=function(n){if(n==null){delete t._fnExtensionProvider}else if(typeof n=="function"){t._fnExtensionProvider=n}else{e.error("ExtensionPoint provider must be a function!")}};t.load=function(e){return Promise.resolve(t._factory(e.container,e.name,e.createDefaultContent))};return t});